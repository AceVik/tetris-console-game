use super::consts::qube::Qube;
use super::geometry::{Direction, Pos};
use super::tetromino::Tetromino;

pub struct Object {
    pub tetromino: Tetromino,
    pub direction: Direction,
    pub pos: Pos,
    pub qube: Qube,
}

impl Object {
    pub fn new(tetromino: Tetromino, direction: Direction, pos: Pos) -> Self {
        let qube = tetromino.get_cube_by_direction(&direction);
        Object {
            tetromino,
            direction,
            pos,
            qube,
        }
    }

    pub fn get_position(&self) -> &Pos {
        &self.pos
    }

    pub fn get_type(&self) -> &Tetromino {
        &self.tetromino
    }

    pub fn get_direction(&self) -> &Direction {
        &self.direction
    }

    pub fn get_qube(&self) -> &Qube {
        &self.qube
    }

    pub fn get_qube_with_width(&self) -> (&Qube, u16) {
        (
            self.get_qube(),
            self.tetromino.dimensions(&self.direction).0,
        )
    }

    pub fn rotate(&mut self) {
        self.direction.rotate();
        self.qube = self.tetromino.get_cube_by_direction(&self.direction);
    }
}

// Tests generated by Junie AI
#[cfg(test)]
mod tests {
    use super::*;
    use crate::game::geometry::Pos;
    use crate::game::tetromino::Tetromino;

    #[test]
    fn test_new_object() {
        let tetromino = Tetromino::L;
        let direction = Direction::Up;
        let pos = Pos::zero();

        let object = Object::new(tetromino, direction, pos);

        assert_eq!(*object.get_type(), tetromino);
        assert_eq!(*object.get_direction(), direction);
        assert_eq!(object.get_position().x, pos.x);
        assert_eq!(object.get_position().y, pos.y);
        assert_eq!(object.get_qube(), &tetromino.get_cube_by_direction(&direction));
    }

    #[test]
    fn test_get_qube_with_width() {
        let tetromino = Tetromino::L;
        let direction = Direction::Up;
        let pos = Pos::zero();

        let object = Object::new(tetromino, direction, pos);
        let (qube, width) = object.get_qube_with_width();

        assert_eq!(qube, &tetromino.get_cube_by_direction(&direction));
        assert_eq!(width, tetromino.dimensions(&direction).0);
    }

    #[test]
    fn test_rotate() {
        let tetromino = Tetromino::L;
        let direction = Direction::Up;
        let pos = Pos::zero();

        let mut object = Object::new(tetromino, direction, pos);
        let original_qube = *object.get_qube();

        object.rotate();

        assert_eq!(*object.get_direction(), Direction::Right);
        assert_ne!(*object.get_qube(), original_qube);
        assert_eq!(*object.get_qube(), tetromino.get_cube_by_direction(&Direction::Right));
    }
}
