name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: 'tetris-console-game'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
      - name: Install ALSA development libraries
        run: sudo apt-get update && sudo apt-get install -y libasound2-dev
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Run tests
        run: cargo test --verbose

  build:
    name: Build (Ubuntu, Windows, macOS)
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: ubuntu-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: macos-aarch64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Install ALSA development libraries (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libasound2-dev
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Build binary (Apple Silicon)
        run: cargo build --release --target ${{ matrix.target }} --verbose
        env:
          SDKROOT: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
          MACOSX_DEPLOYMENT_TARGET: '10.7'
        if: matrix.target == 'aarch64-apple-darwin'
      - name: Build binary (non-Apple Silicon)
        run: cargo build --release --target ${{ matrix.target }} --verbose
        if: matrix.target != 'aarch64-apple-darwin'
      - name: Package for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf ../../../${{ env.BINARY_NAME }}-${{ matrix.artifact_name }}.tar.gz ${{ env.BINARY_NAME }}
          cd -
      - name: Package for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ env.BINARY_NAME }}-${{ matrix.artifact_name }}.zip ${{ env.BINARY_NAME }}.exe
          cd -
      - name: Package for macOS
        if: matrix.os == 'macos-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf ../../../${{ env.BINARY_NAME }}-${{ matrix.artifact_name }}.tar.gz ${{ env.BINARY_NAME }}
          cd -
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.artifact_name }}
          path: ${{ env.BINARY_NAME }}-${{ matrix.artifact_name }}.*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          body_path: .github/release_notes.md
          prerelease: false
          files: |
            artifacts/**/*